{"version":3,"file":"component---src-posts-creating-personal-site-with-gatsby-mdx-ea3190f009383adb9fa2.js","mappings":"oMAiCO,MAAMA,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,CCtEA,MAJwCE,IAAmB,IAAlB,SAAEC,GAAU,EACnD,OAAOC,EAAAA,cAAAA,OAAAA,CAAMC,UCJM,YDI0BF,EAAgB,EED/D,SAASG,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,KACFC,IAAsBN,EAAMP,YAC/B,OAAOI,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBI,EAAYG,GAAI,KAAM,sCAAuC,KAAMP,EAAAA,cAAoBI,EAAYI,EAAG,KAAM,0FACnL,CAIA,MAHA,SAAoBL,GAClB,YADuB,IAALA,IAAAA,EAAQ,CAAC,GACpBH,EAAAA,cAAoBU,EAAWP,EAAOH,EAAAA,cAAoBE,EAAmBC,GACtF,C","sources":["webpack://samuelsilvadev.github.io/./node_modules/@mdx-js/react/lib/index.js","webpack://samuelsilvadev.github.io/./src/components/post-layout/PostLayout.tsx","webpack://samuelsilvadev.github.io/./src/components/post-layout/styles.css.ts","webpack://samuelsilvadev.github.io/./src/posts/creating-personal-site-with-gatsby.mdx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import React from \"react\";\nimport * as classNames from \"./styles.css\";\nimport { PageProps } from \"gatsby\";\n\nconst PostLayout: React.FC<PageProps> = ({ children }) => {\n  return <main className={classNames.wrapper}>{children}</main>;\n};\n\nexport default PostLayout;\n","import \"src/components/post-layout/styles.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/components/post-layout/styles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll80cGtsc2cwIHsKICBjb2xvcjogIzIzMjEyOTsKICBwYWRkaW5nOiA0OHB4OwogIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBSb2JvdG8sIHNhbnMtc2VyaWYsIHNlcmlmOwp9\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var wrapper = '_4pklsg0';","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport MDXLayout from \"../components/post-layout/PostLayout.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Creating personal site with gatsby\"), \"\\n\", React.createElement(_components.p, null, \"I want to describe which steps I took in order to create my personal site with gatsby.\"));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n"],"names":["MDXContext","useMDXComponents","components","contextComponents","_ref","children","React","className","_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","MDXLayout"],"sourceRoot":""}